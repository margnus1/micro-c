options {
  STATIC = false; // Bug in 6.0 with STATIC=true
  VISITOR = true;
  TRACK_TOKENS = true;
}

PARSER_BEGIN(UcParse)
package parser;

import java.util.*;
import java.io.*;

public class UcParse {}

enum Binop { ANDAND, NE,
        LT, GT, LTEQ, GTEQ,
        PLUS, MINUS,
        MUL, DIV, EQEQ, NOTEQ}

enum Unop { NOT, MINUS }

enum Type {INT, CHAR, VOID}

PARSER_END(UcParse)


SKIP : { " " | "\t" | "\n" | "\r" | "\f" }

        SPECIAL_TOKEN : {
<SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")? > }


//multiline comments
MORE : { "/*" : IN_MULTI_LINE_COMMENT }


<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
        { <MULTI_LINE_COMMENT: "*/" > : DEFAULT }

<IN_MULTI_LINE_COMMENT>
MORE : { < ~[] > }

// keywords
TOKEN : {<CHAR    : "char">}
TOKEN : {<ELSE    : "else">}
TOKEN : {<IF      : "if">}
TOKEN : {<INT     : "int">}
TOKEN : {<RETURN  : "return">}
TOKEN : {<VOID    : "void">}
TOKEN : {<WHILE   : "while">}


// special symbols
TOKEN : {<NOTEQ  : "!=">}
TOKEN : {<NOT    : "!">}
TOKEN : {<ANDAND : "&&">}
TOKEN : {<LPAREN : "(">}
TOKEN : {<RPAREN : ")">}
TOKEN : {<MUL    : "*">}
TOKEN : {<PLUS   : "+">}
TOKEN : {<COMMA  : ",">}
TOKEN : {<MINUS  : "-">}
TOKEN : {<DIV    : "/">}
TOKEN : {<SEMI   : ";">}
TOKEN : {<LTEQ   : "<=">}
TOKEN : {<LT     : "<">}
TOKEN : {<EQEQ   : "==">}
TOKEN : {<EQ     : "=">}
TOKEN : {<GTEQ   : ">=">}
TOKEN : {<GT     : ">">}
TOKEN : {<LBRACK : "[">}
TOKEN : {<RBRACK : "]">}
TOKEN : {<LBRACE : "{">}
TOKEN : {<RBRACE : "}">}

// Decimal integer constants
TOKEN : {<INTEGER_CONSTANT : ( ["1"-"9"] (["0"-"9"])*
                             | "0" ) >}

//char literals
TOKEN: {<CHARACTER_LITERAL:
    "\'" ( ["\u0020"-"\u007e"]
         |  "\\n" )
    "\'" >}

TOKEN : {
    <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
               | <#LETTER: ["$","A"-"Z","_","a"-"z"]>
               | <#DIGIT: ["0"-"9"]>}

SimpleNode Start() : {}
{
    ( TopLevelDeclaration() )*
    <EOF>  {
        return jjtThis;
    }
}

void TopLevelDeclaration() #void: {}
{
  BaseType()
  Declarator()
  ( FunctionParameters()
    ( CompoundStatement() #FunctionDefinition(4)
    | <SEMI> #FunctionDeclaration(3) )
  | <SEMI> #VariableDeclaration(2) )
}

void FunctionParameters() : {}
{ <LPAREN>
  ( <VOID>
  | VariableDeclaration()
    ( <COMMA>
      VariableDeclaration() )* )
  <RPAREN>
}

void VariableDeclaration() : {}
{
  BaseType()
  Declarator()
}

// List<void> AbstractFunctionParameters () :
void AbstractFunctionParameters() : {}
{
  FunctionParameters ()
}

void BaseType() : {}
{ <CHAR> {jjtThis.value = Type.CHAR;}
| <INT>  {jjtThis.value = Type.INT;}
| <VOID> {jjtThis.value = Type.VOID;}
}

void Declarator () #void : {}
{
  Identifier()
  ( <LBRACK>
    ( IntegerLiteral() <RBRACK> #ArrayDeclarator(2)
    | <RBRACK> #ArrayDeclarator(1))
  | {} )
}

void CompoundStatement () : {}
{
  <LBRACE>
  ( ( VariableDeclaration()
      <SEMI> )* #VariableDeclarations)
  ( ( Statement() )* #Statements )
  <RBRACE>
}

void Statement() #void : {}
{ SimpleCompoundStatement()
| Expression()
  <SEMI>
| <SEMI> #EmptyStatement(0)
| <IF>
  <LPAREN>
  Expression()
  <RPAREN>
  Statement()
  ( LOOKAHEAD(1)
    <ELSE>
    Statement() #IfStatement(3)
  | {} #IfStatement(2))
| <WHILE>
  <LPAREN>
  Expression()
  <RPAREN>
  Statement() #WhileStatement(2)
| <RETURN>
  ( Expression() <SEMI> #ReturnStatement(1)
   | <SEMI> #ReturnStatement(0))
}

void SimpleCompoundStatement() : {}
{
  <LBRACE>
  ( Statement() )*
  <RBRACE>
}



void Expression () #void : {}
{
    Expr5L()
    ( <EQ> Expression() #Assignment(2)
    | {})
}

void Expr5L() #void :{}
{
    Expr9L() (<ANDAND> Expr9L() { jjtThis.value=(Binop.ANDAND); } #Binary(2))ZX*
}

void Expr9L() #void : {Binop op;}
{
    Expr10L() (( <EQEQ>  { op = Binop.EQEQ; }
               | <NOTEQ> { op = Binop.NOTEQ; } )
               Expr10L() {jjtThis.value=op;} #Binary(2))*
}

void Expr10L() #void : {Binop op;}
{
    Expr12L() ( ( <LT>   { op= Binop.LT; }
                | <LTEQ> { op= Binop.LTEQ; }
                | <GT>   { op= Binop.GT; }
                | <GTEQ> { op= Binop.GTEQ; } )
                Expr12L() {jjtThis.value=op;} #Binary(2) )*
}

void Expr12L() #void : {Binop op;}
{
    Expr13L()
        ( ( <PLUS>  { op = Binop.PLUS; }
          | <MINUS> { op = Binop.MINUS; } )
          Expr13L() {jjtThis.value=op;} #Binary(2) )*
}

void Expr13L() #void : {Binop op;}
{
    ExprPrime()
        ( ( <MUL> { op= Binop.MUL; }
          | <DIV> { op= Binop.DIV; })
          ExprPrime() {jjtThis.value=op;} #Binary(2) )*

}

void ExprPrime() #void: { Unop op; }
{ ( IntegerLiteral()
  | <LPAREN>
    Expression()
    <RPAREN>
  | Identifier()
    ( <LBRACK>
      Expression()
      <RBRACK> #ArrayLookup(2)
    | FunctionArguments() #FunctionCall(2)
    | {} )
  | ( <MINUS> { op = Unop.MINUS; }
    | <NOT>   { op = Unop.NOT; })
    ExprPrime() {jjtThis.value = op;} #UnaryExpr(1))
}

void FunctionCall() : {}
{ FunctionArguments()
}

void FunctionArguments() : {}
{ <LPAREN>
  ( Expression()
    ( <COMMA>
      Expression() )*
  | {} )
  <RPAREN>
}

void Identifier() : { Token id; }
{ id = <IDENTIFIER> { jjtThis.value = id.image; }
}


void IntegerLiteral() : { Token lit; }
{ lit = <INTEGER_CONSTANT> {
      jjtThis.value = Integer.parseInt(lit.image);
  }
| lit = <CHARACTER_LITERAL> {
      if(lit.image.charAt(1) == '\\'){
          switch (lit.image.charAt(2)){
          case 'n':
              jjtThis.value = 10;
              break;
          default:
              throw new RuntimeException("Bad escape code in character literal");
          }
      }else{
          jjtThis.value = (int)(lit.image.charAt(1));
      }
  }
}
