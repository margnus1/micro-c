options {
  STATIC = false; // Bug in 6.0 with STATIC=true
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(LexerTest)
public class LexerTest {
    public static void main(String[] args)
         {
        LexerTest parser = null;
        if(args.length == 0){
            System.out.println("Reading from standard input");
            parser = new LexerTest(System.in);
        }else if(args.length == 1){
            try{
                System.out.println("JavaCC Parser:  Reading from file " + args[0] + " . . .");
                parser = new LexerTest(new java.io.FileInputStream(args[0]));

            }catch(java.io.FileNotFoundException e){
                return;
            }
        }

        try{
            parser.Start();
        }catch (ParseException p){
            System.out.println(p);
        }catch (TokenMgrError t){
            System.out.println(t);
        }

    }
}
PARSER_END(LexerTest)

SKIP : { " " | "\t" | "\n" | "\r" | "\f" }

SPECIAL_TOKEN : {
    <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")? > }


//multiline comments
MORE :
{
    "/*" : IN_MULTI_LINE_COMMENT
}


<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
        {
<MULTI_LINE_COMMENT: "*/" > : DEFAULT
        }

<IN_MULTI_LINE_COMMENT>
MORE :
        {
< ~[] >
        }

// keywords   why extern?
TOKEN : {<CHAR    : "char">}

TOKEN : {<ELSE    : "else">}
TOKEN : {<EXTERN  : "extern">}
TOKEN : {<IF      : "if">}
TOKEN : {<INT     : "int">}
TOKEN : {<RETURN  : "return">}
TOKEN : {<VOID    : "void">}
TOKEN : {<WHILE   : "while">}


// special symbols


TOKEN : {<NOTEQ  : "!=">}
TOKEN : {<NOT    : "!">}
TOKEN : {<ANDAND : "&&">}
TOKEN : {<OROR   : "||">}
TOKEN : {<LPAREN : "(">}
TOKEN : {<RPAREN : ")">}
TOKEN : {<MUL    : "*">}
TOKEN : {<PLUS   : "+">}
TOKEN : {<COMMA  : ",">}
TOKEN : {<MINUS  : "-">}
TOKEN : {<DIV    : "/">}
TOKEN : {<SEMI   : ";">}
TOKEN : {<LTEQ   : "<=">}
TOKEN : {<LT     : "<">}
TOKEN : {<EQEQ   : "==">}
TOKEN : {<EQ     : "=">}
TOKEN : {<GTEQ   : ">=">}
TOKEN : {<GT     : ">">}
TOKEN : {<LBRACK : "[">}
TOKEN : {<RBRACK : "]">}
TOKEN : {<LBRACE : "{">}
TOKEN : {<RBRACE : "}">}

// TOKEN : {<STRING >}

// Decimal integer constants
TOKEN : {<INTEGER_CONSTANT : ( ["1"-"9"] (["0"-"9"])*
                             | "0" ) >}

//char literals
TOKEN: {<CHARACTER_LITERAL:
        "\'" ( ["\u0020"-"\u007e"]
             |  "\\n" )
        "\'" >}

TOKEN : {
<IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
        |  <#LETTER: ["$","A"-"Z","_","a"-"z"]>
        |  <#DIGIT: ["0"-"9"]>
        }

JAVACODE
void Start()
{
    Token t;
    while ((t = getNextToken()).kind != EOF) {
        System.out.println(LexerTestConstants.tokenImage[t.kind] + " : \"" + t.image + "\"" +
                           (t.getValue() != null ? " = " + t.getValue().toString() : ""));
   }
}
