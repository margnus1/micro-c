

options {
  STATIC = false; // Bug in 6.0 with STATIC=true
        DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(LexerTest)


public class LexerTest {
    public static void main(String[] args)
            throws ParseException{
        LexerTest parser = null;
        if(args.length == 0){
            System.out.println("Reading from standard input");
            parser = new LexerTest(System.in);
        }else if(args.length == 1){
            try{
                System.out.println("JavaCC Parser:  Reading from file " + args[0] + " . . .");
                parser = new LexerTest(new java.io.FileInputStream(args[0]));

            }catch(java.io.FileNotFoundException e){
                return;
            }
        }


        parser.Start();
    }
}


PARSER_END(LexerTest)


SKIP : { " " | "\t" | "\n" | "\r" }

SPECIAL_TOKEN : {
    <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")? > }


//multiline comments



// keywords   why extern?
TOKEN : {<CHAR    : "char">}

TOKEN : {<ELSE    : "else">}
TOKEN : {<EXTERN  : "extern">}
TOKEN : {<IF      : "if">}
TOKEN : {<INT     : "int">}
TOKEN : {<RETURN  : "return">}
TOKEN : {<VOID    : "void">}
TOKEN : {<WHILE   : "while">}


// special symbols


TOKEN : {<NOTEQ  : "!=">}
TOKEN : {<NOT    : "!">}
TOKEN : {<ANDAND : "&&">}
TOKEN : {<OROR   : "||">}
TOKEN : {<LPAREN : "(">}
TOKEN : {<RPAREN : ")">}
TOKEN : {<MUL    : "*">}
TOKEN : {<PLUS   : "+">}
TOKEN : {<COMMA  : ",">}
TOKEN : {<MINUS  : "-">}
TOKEN : {<DIV    : "/">}
TOKEN : {<SEMI   : ";">}
TOKEN : {<LTEQ   : "<=">}
TOKEN : {<LT     : "<">}
TOKEN : {<EQEQ   : "==">}
TOKEN : {<EQ     : "=">}
TOKEN : {<GTEQ   : ">=">}
TOKEN : {<GT     : ">">}
TOKEN : {<LBRACK : "[">}
TOKEN : {<RBRACK : "]">}
TOKEN : {<LBRACE : "{">}
TOKEN : {<RBRACE : "}">}

// TOKEN : {<STRING >}



// Decimal integer constants
TOKEN : {<INTEGER_CONSTANT : ["1"-"9"] (["0"-"9"])*>}


//char literals
TOKEN: {<CHARACTER_LITERAL:
        "\'" (~["\'","\\","\n","\r"] |
                "\\" (["n","t","b","r","f","\\","\'","\""] |
                ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">}


TOKEN : {
<IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
        |  <#LETTER: ["$","A"-"Z","_","a"-"z"]>
        |  <#DIGIT: ["0"-"9"]>
        }



//  TOKEN : {<IDENT >}







void Start() :
{
  Token t;
}
{
  (
   (t = <CHAR>   |
    t = <ELSE>   |
    t = <EXTERN> |
    t = <INT>    |
    t = <RETURN> |
    t = <VOID>   |
    t = <WHILE>  |
    t = <NOTEQ>  |
    t = <SEMI>   |
    t = <LPAREN> |
    t = <RPAREN> |
    t = <LBRACE> |
    t = <RBRACE> |
    t = <EQ> |
    t = <INTEGER_CONSTANT> |
    t = <CHARACTER_LITERAL> |
    t = <IDENTIFIER>) {
       System.out.println(LexerTestConstants.tokenImage[t.kind] + " : \"" + t.image + "\"" +
                          (t.getValue() != null ? " = " + t.getValue().toString() : ""));
   }
  )* <EOF>
}
